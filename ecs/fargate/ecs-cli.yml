---
AWSTemplateFormatVersion: "2010-09-09"
Description: ECS CLI

Parameters:
  Env:
    Type: String

  NetworkStackNamePrefix:
    Type: String
    Default: network

Resources:
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub alb-sg-${Env}
      GroupDescription: !Sub alb-sg-${Env}
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackNamePrefix}-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub alb-${Env}
      Scheme: internet-facing
      Subnets:
        - Fn::ImportValue: !Sub ${NetworkStackNamePrefix}-FrontendSubnet1Id
        - Fn::ImportValue: !Sub ${NetworkStackNamePrefix}-FrontendSubnet2Id
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 200
      SecurityGroups:
        - !Ref AlbSecurityGroup

  AlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub alb-target-group-${Env}
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackNamePrefix}-VpcId
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      Port: 80
      HealthyThresholdCount: 5
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      Protocol: HTTP
      Matcher:
        HttpCode: 200
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 300

  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref Alb
      Protocol: HTTPS
      Port: 443
      Certificates:
        - CertificateArn: !Sub arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/{{resolve:ssm:MyAcmIdentifier:1}}
      DefaultActions:
        - TargetGroupArn: !Ref AlbTargetGroup
          Type: forward

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub task-execution-role-${Env}
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: snippetbox

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub cluster-${Env}

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub service-role-${Env}
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub service-sg-${Env}
      GroupDescription: !Sub service-sg-${Env}
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackNamePrefix}-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !Ref AlbSecurityGroup

  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: "{{resolve:ssm:MyHostedZone:1}}"
      Name: !Sub fargate.{{resolve:ssm:MyDomain:1}}
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt Alb.CanonicalHostedZoneID
        DNSName: !GetAtt Alb.DNSName

Outputs:
  RecordSet:
    Value: !Sub https://${RecordSet}

  ServiceSecurityGroupId:
    Value: !Ref ServiceSecurityGroup

  TaskLogGroupName:
    Value: !Ref TaskLogGroup
