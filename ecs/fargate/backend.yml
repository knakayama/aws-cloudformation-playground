---
AWSTemplateFormatVersion: "2010-09-09"
Description: Backend

Parameters:
  Env:
    Type: String

  NetworkStackNamePrefix:
    Type: String
    Default: network

  HostedZoneId:
    Type: String

  DomainName:
    Type: String

  AcmIdentifier:
    Type: String

  UserPoolId:
    Type: String

  UserPoolClientId:
    Type: String

Resources:
  AlbLogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub snippet-alb-log-${Env}

  AlbLogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AlbLogBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - s3:PutObject
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${AlbLogBucket}/*
            Principal:
              AWS: 582318560864

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub alb-sg-${Env}
      GroupDescription: !Sub alb-sg-${Env}
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackNamePrefix}-${Env}-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  Alb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub alb-${Env}
      Scheme: internet-facing
      Subnets:
        - Fn::ImportValue: !Sub ${NetworkStackNamePrefix}-${Env}-FrontendSubnet1Id
        - Fn::ImportValue: !Sub ${NetworkStackNamePrefix}-${Env}-FrontendSubnet2Id
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 200
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Ref AlbLogBucket
        - Key: access_logs.s3.prefix
          Value: !Sub snippet-${Env}
      SecurityGroups:
        - !Ref AlbSecurityGroup

  AlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub alb-target-group-${Env}
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackNamePrefix}-${Env}-VpcId
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      Port: 80
      HealthyThresholdCount: 5
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      Protocol: HTTP
      Matcher:
        HttpCode: 200
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 300

  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref Alb
      Protocol: HTTPS
      Port: 443
      Certificates:
        #- CertificateArn: !Sub arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/{{resolve:ssm:MyAcmIdentifier:1}}
        - CertificateArn: !Sub arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${AcmIdentifier}
      DefaultActions:
        - Type: authenticate-cognito
          Order: 1
          AuthenticateCognitoConfig:
            UserPoolArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}
            UserPoolClientId: !Ref UserPoolClientId
            UserPoolDomain: knakayama-alb-auth
            SessionCookieName: AWSELBAuthSessionCookie
            Scope: openid
            SessionTimeout: 604800
            OnUnauthenticatedRequest: authenticate
        - Type: forward
          Order: 2
          TargetGroupArn: !Ref AlbTargetGroup

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub task-execution-role-${Env}
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub snippetbox-${Env}

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub cluster-${Env}

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub service-role-${Env}
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub service-sg-${Env}
      GroupDescription: !Sub service-sg-${Env}
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackNamePrefix}-${Env}-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !Ref AlbSecurityGroup

  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub fargate.${DomainName}
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt Alb.CanonicalHostedZoneID
        DNSName: !GetAtt Alb.DNSName

Outputs:
  RecordSet:
    Value: !Sub https://${RecordSet}

  ServiceSecurityGroupId:
    Value: !Ref ServiceSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-ServiceSecurityGroupId

  TaskExecutionRoleArn:
    Value: !GetAtt TaskExecutionRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-TaskExecutionRoleArn

  TaskLogGroupName:
    Value: !Ref TaskLogGroup
    Export:
      Name: !Sub ${AWS::StackName}-TaskLogGroupName

  ClusterName:
    Value: !Ref Cluster
    Export:
      Name: !Sub ${AWS::StackName}-ClusterName

  AlbTargetGroupArn:
    Value: !Ref AlbTargetGroup
    Export:
      Name: !Sub ${AWS::StackName}-AlbTargetGroupArn
