---
AWSTemplateFormatVersion: 2010-09-09
Description: ECS Sample Stack

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
  AcmIdentifier:
    Type: String
  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
  HostedZoneName:
    Type: String

Resources:
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole

  NginxLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub nginx-${AWS::StackName}

  APPLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub app-${AWS::StackName}

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: application-stack
      TaskRoleArn: !Ref TaskRole
      NetworkMode: bridge
      ContainerDefinitions:
        - Name: nginx
          Image: !Sub ${AWS::AccountId}.dkr.ecr.ap-northeast-1.amazonaws.com/test:test1_nginx
          Memory: 256
          Cpu: 256
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref NginxLogGroup
              awslogs-region: !Ref AWS::Region
          PortMappings:
            - ContainerPort: 80
              HostPort: 0
              Protocol: tcp
          Links:
            - app
        - Name: app
          Image: !Sub ${AWS::AccountId}.dkr.ecr.ap-northeast-1.amazonaws.com/test:test1_app
          Memory: 256
          Cpu: 256
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref APPLogGroup
              awslogs-region: !Ref AWS::Region

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref AWS::StackName
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: !Ref SubnetIds
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 200
      SecurityGroups:
        - !Ref ALBSecurityGroup
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckPath: /api/health-check
      Port: 80
      HealthyThresholdCount: 5
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      Protocol: HTTP
      Matcher:
        HttpCode: 200
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 300
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Protocol: HTTPS
      Port: 443
      Certificates:
        - CertificateArn: !Sub arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${AcmIdentifier}
      DefaultActions:
        - TargetGroupArn: !Ref ALBTargetGroup
          Type: forward

  ClusterInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref AWS::StackName
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  Cluster:
    Type: AWS::ECS::Cluster

  ClusterInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ec2.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
  ClusterInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ClusterInstanceRole

  ClusterInstanceLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-57d9cd2e
      InstanceType: t2.micro
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref ClusterInstanceProfile
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref ClusterInstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${Cluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ClusterInstanceAutoScalingGroup --region ${AWS::Region}

  ClusterInstanceAutoScalingGroup:
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref SubnetIds
      LaunchConfigurationName: !Ref ClusterInstanceLaunchConfiguration
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  Service:
    DependsOn: ALBListener
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      Role: !Ref ServiceRole
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      LoadBalancers:
        - ContainerName: nginx
          ContainerPort: 80
          TargetGroupArn: !Ref ALBTargetGroup

  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub api.${HostedZoneName}
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt ALB.CanonicalHostedZoneID
        DNSName: !GetAtt ALB.DNSName

  Bucket:
    Type: AWS::S3::Bucket

  KinesisFirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - firehose.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  KinesisFirehoseLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub kinesis-firehose-${AWS::StackName}
  KinesisFirehoseLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref KinesisFirehoseLogGroup
      LogStreamName: kinesis

  KinesisFirehose:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      S3DestinationConfiguration:
        RoleARN: !GetAtt KinesisFirehoseRole.Arn
        BucketARN: !GetAtt Bucket.Arn
        BufferingHints:
          IntervalInSeconds: 300
          SizeInMBs: 5
        CloudWatchLoggingOptions:
          Enabled: true
          LogStreamName: !Ref KinesisFirehoseLogStream
          LogGroupName: !Ref KinesisFirehoseLogGroup
        CompressionFormat: UNCOMPRESSED
        Prefix: test-prefix

  CloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - !Sub logs.${AWS::Region}.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonKinesisFirehoseFullAccess

  NginxSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn: !GetAtt CloudWatchRole.Arn
      LogGroupName: !Ref NginxLogGroup
      FilterPattern: ""
      DestinationArn: !Sub arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/${KinesisFirehose}
  APPSubscriptionFilter:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      RoleArn: !GetAtt CloudWatchRole.Arn
      LogGroupName: !Ref APPLogGroup
      FilterPattern: ""
      DestinationArn: !Sub arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/${KinesisFirehose}

Outputs:
  FQDN:
    Value: !Ref RecordSet
